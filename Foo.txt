import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.ArrayList; import java.util.List; import java.util.Scanner; class Input { 	List<Family> families; 	 	public Input(int n) { 		this.families = new ArrayList<Family>(n); 	} } class CandidateCode { 	 	public static void main(String[] args) throws Exception { 		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 		int numTests = Integer.parseInt(br.readLine()); 		for (int t = 0; t < numTests; t++) { 			int numHouse = Integer.parseInt(br.readLine()); 			Input tc = new Input(numHouse); 			String[] tickets = br.readLine().split(" "); 			 			boolean allNegatives = true; 			 			for (int tk = 0; tk < numHouse; tk++) { 				Integer val = Integer.parseInt(tickets[tk]); 				 				if(val >= 0) { 					allNegatives = false; 				} 				if(val == 0) { 					val = -1001; 				} 				 				Family h = new Family(val); 				 				tc.families.add(h); 			} 			process(tc, allNegatives); 		} 		br.close(); 	} 	private static void process(Input tc, boolean allNegatives) { 		List<Family> maxFamilies = execute(tc.families, allNegatives); 		for (int h = maxFamilies.size() - 1; h >= 0; h--) { 			Family house = maxFamilies.get(h); 			Integer it = house.amount; 			System.out.print(it); 		} 		System.out.println(); 	} 	private static List<Family> execute(List<Family> houses, boolean negativesValuesFound) { 		 		List<Family> odd = new ArrayList<Family>(houses.size()/2 + 1); 		List<Family> evenNumbered = new ArrayList<Family>(houses.size()/2 + 1); 		Family firstHouse = houses.get(0); 		 		firstHouse.exclusive = negativesValuesFound ? -1002 : 0; 		firstHouse.inclusive = firstHouse.amount; 		 		odd.add(firstHouse); 		Integer incl = firstHouse.inclusive; 		Integer excl = firstHouse.exclusive; 		 		for (int i = 1; i < houses.size(); i++) { 			Family cur = houses.get(i); 			 			if(i==1 || negativesValuesFound) { 				cur.inclusive = cur.amount; 			} else { 				cur.inclusive = cur.amount + excl; 			} 			 			cur.exclusive = excl > incl ? excl : incl; 			 			List<Family> select = null; 			List<Family> discard = null; 			 			if(i % 2 != 0) { 				select = evenNumbered; 				discard = odd; 			} else { 				select = odd; 				discard = evenNumbered; 			} 			if(cur.inclusive >= cur.exclusive) { 				Integer ssSum = sumLists(select); 				if (((ssSum != null ? ssSum : 0) + cur.amount) < cur.amount) { 					select.clear();  				} 				select.add(cur); 			} 			else { 				select.clear(); 				select.addAll(discard); 			} 			 			if(cur.inclusive == cur.exclusive) { 				balanceLists(odd, evenNumbered); 			} 			 			excl = cur.exclusive; 			incl = cur.inclusive; 		} 		 		Integer oddSum = sumLists(odd); 		Integer evenSum = sumLists(evenNumbered); 		 		if(oddSum != null && evenSum != null) { 			if(evenSum >= oddSum) { 				return evenNumbered; 			} else { 				return odd; 			} 		} 		else 			return evenSum == null ? odd : evenNumbered; 		 	} 	 	private static Integer sumLists(List<Family> odd) { 		 /*		if(odd.isEmpty()) { 			return null; 		} */		 		Integer sum = 0; 		for(Family h : odd) { 			sum = sum + h.amount; 		} 		 		return sum; 	} 	private static List<Family> balanceLists(List<Family> odd, List<Family> even) { 		int minsize = odd.size() < even.size() ? odd.size() : even.size(); 		List<Family> listForSwap = null; 		List<Family> listToBeSwapped = null; 		 		for (int i = 0; i < minsize; i++) { 			Family oddHouse = odd.get(odd.size()-1 - i); 			Family evenHouse = even.get(even.size()-1 - i); 			if(evenHouse.amount >= oddHouse.amount) { 				listForSwap = even; 				listToBeSwapped = odd; 				break; 			} else { 				listForSwap = odd; 				listToBeSwapped = even; 				break; 			} 		} 		 		listToBeSwapped.clear(); 		listToBeSwapped.addAll(listForSwap); 		 		return listForSwap; 	} } class Family { 	Integer amount; 	Integer exclusive; 	Integer inclusive; 	 	public Family(int parseInt) { 		this.amount = parseInt; 	} }
