import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

class SeedData {
    List<FlatUnit> flatUnits;

    public SeedData(int x) {
        this.flatUnits = new ArrayList<FlatUnit>(x);
    }
}

class CandidateCode {
    public static void main(String[] args) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int numTests = Integer.parseInt(reader.readLine());
        for (int t = 0; t < numTests; t++) {
            int numHouse = Integer.parseInt(reader.readLine());
            SeedData tc = new SeedData(numHouse);
            String[] tickets = reader.readLine().split(" ");
            boolean allNegatives = true;
            for (int tk = 0; tk < numHouse; tk++) {
                Integer val = Integer.parseInt(tickets[tk]);
                if (val >= 0) {
                    allNegatives = false;
                }
                if (val == 0) {
                    val = -1001;
                }
                FlatUnit h = new FlatUnit(val);
                tc.flatUnits.add(h);
            }
            runMill(tc, allNegatives);
        }
        reader.close();
    }

    private static void runMill(SeedData seedData, boolean allNegativesFlag) {
        List<FlatUnit> possibleFamilies = run(seedData.flatUnits, allNegativesFlag);
        for (int i = possibleFamilies.size() - 1; i >= 0; i--) {
            FlatUnit flatUnit = possibleFamilies.get(i);
            Integer prizeMoney = flatUnit.prizeMoney;
            System.out.print(prizeMoney);
        }
        System.out.println();
    }

    private static List<FlatUnit> run(List<FlatUnit> flatUnits, boolean hasNegatives) {
        List<FlatUnit> oddNumbered = new ArrayList<FlatUnit>(flatUnits.size() / 2 + 1);
        List<FlatUnit> evenNumbered = new ArrayList<FlatUnit>(flatUnits.size() / 2 + 1);
        FlatUnit firstHouse = flatUnits.get(0);

        firstHouse.exclNeighbor = hasNegatives ? -1002 : 0;
        firstHouse.inclNeighbor = firstHouse.prizeMoney;

        oddNumbered.add(firstHouse);

        Integer inclNeighbor = firstHouse.inclNeighbor;
        Integer exclNeighbor = firstHouse.exclNeighbor;

        for (int i = 1; i < flatUnits.size(); i++) {
            FlatUnit thisFlat = flatUnits.get(i);
            if (i == 1 || hasNegatives) {
                thisFlat.inclNeighbor = thisFlat.prizeMoney;
            } else {
                thisFlat.inclNeighbor = thisFlat.prizeMoney + exclNeighbor;
            }

            thisFlat.exclNeighbor = exclNeighbor > inclNeighbor ? exclNeighbor : inclNeighbor;

            List<FlatUnit> shortlist = null;
            List<FlatUnit> dismiss = null;

            if (i % 2 != 0) {
                shortlist = evenNumbered;
                dismiss = oddNumbered;
            } else {
                shortlist = oddNumbered;
                dismiss = evenNumbered;
            }
            if (thisFlat.inclNeighbor >= thisFlat.exclNeighbor) {
                Integer ssSum = getSum(shortlist);
                if (((ssSum != null ? ssSum : 0) + thisFlat.prizeMoney) < thisFlat.prizeMoney) {
                    shortlist.clear();
                }
                shortlist.add(thisFlat);
            } else {
                shortlist.clear();
                shortlist.addAll(dismiss);
            }
            if (thisFlat.inclNeighbor == thisFlat.exclNeighbor) {
                remainingFlats(oddNumbered, evenNumbered);
            }
            exclNeighbor = thisFlat.exclNeighbor;
            inclNeighbor = thisFlat.inclNeighbor;
        }

        Integer sumOdds = getSum(oddNumbered);
        Integer sumEvens = getSum(evenNumbered);

        if (sumOdds != null && sumEvens != null) {
            if (sumEvens >= sumOdds) {
                return evenNumbered;
            } else {
                return oddNumbered;
            }
        } else return sumEvens == null ? oddNumbered : evenNumbered;
    }

    private static Integer getSum(List<FlatUnit> flatUnit) {
        Integer sum = 0;
        for (FlatUnit f : flatUnit) {
            sum = sum + f.prizeMoney;
        }
        return sum;
    }

    private static List<FlatUnit> remainingFlats(List<FlatUnit> oddFlats, List<FlatUnit> evenFlats) {
        int minsize = oddFlats.size() < evenFlats.size() ? oddFlats.size() : evenFlats.size();
        List<FlatUnit> swapUnits = null;
        List<FlatUnit> toBeSwappedUntis = null;
        for (int i = 0; i < minsize; i++) {
            FlatUnit oddFlat = oddFlats.get(oddFlats.size() - 1 - i);
            FlatUnit evenFlat = evenFlats.get(evenFlats.size() - 1 - i);
            if (evenFlat.prizeMoney >= oddFlat.prizeMoney) {
                swapUnits = evenFlats;
                toBeSwappedUntis = oddFlats;
                break;
            } else {
                swapUnits = oddFlats;
                toBeSwappedUntis = evenFlats;
                break;
            }
        }
        toBeSwappedUntis.clear();
        toBeSwappedUntis.addAll(swapUnits);
        return swapUnits;
    }
}

class FlatUnit {
    Integer prizeMoney;
    Integer exclNeighbor;
    Integer inclNeighbor;

    public FlatUnit(int parseInt) {
        this.prizeMoney = parseInt;
    }
}
